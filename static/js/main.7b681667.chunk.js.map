{"version":3,"sources":["Components/Loader/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","props","state","p","Containerclass","totalTime","loading","timer","bind","breatheTime","this","holdTime","setTimeout","setState","interval","setInterval","clearInterval","className","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4OAGqBA,G,kBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAM,CACPC,EAAE,eACFC,eAAe,uBACfC,UAAU,KACVC,QAAQ,MAEZ,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBARC,E,qEAUV,IAAD,OACGC,EAAmC,GAArBC,KAAKR,MAAMG,UACzBM,EAAgC,GAArBD,KAAKR,MAAMG,UAE5BO,YAAW,WACP,EAAKC,SAAS,CAACV,EAAE,WACjBS,YAAW,WACP,EAAKC,SAAS,CAACV,EAAE,gBAAgBC,eAAe,yBAAyBE,QAAQ,QACjFM,YAAW,WACP,EAAKC,SAAS,CAACV,EAAE,cAAcC,eAAe,uBAAuBE,QAAQ,SAC/EG,KACJE,KACJF,K,0CAIFC,KAAKH,QACLG,KAAKI,SAAWC,YAAYL,KAAKH,MAAMG,KAAKR,MAAMG,a,6CAGlDW,cAAcN,KAAKI,Y,+BAInB,OACI,yBAAKG,UAAU,mBACX,qCACA,wBAAIA,UAAWP,KAAKR,MAAMI,SAA1B,oBACA,yBAAKW,UAAWP,KAAKR,MAAME,gBACvB,yBAAKa,UAAU,gBACf,yBAAKA,UAAU,WACf,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,aAEnB,uBAAGA,UAAU,QAAQP,KAAKR,MAAMC,S,GA7CjBe,cCSpBC,E,iLAPX,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,W,GAJUD,aCSZE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACf2B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SDiBxC,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,gBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,gBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC5C/BE,I","file":"static/js/main.7b681667.chunk.js","sourcesContent":["import React,{Component,Fragment} from 'react'\nimport './styles/styles.css'\n\nexport default class Index extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            p:'Breathe in !',\n            Containerclass:'loaderContainer grow',\n            totalTime:7500,\n            loading:'on'\n        }\n        this.timer = this.timer.bind(this)\n    }\n    timer(){\n        const breatheTime = this.state.totalTime*0.4\n        const holdTime = this.state.totalTime*0.2\n        \n        setTimeout(()=>{\n            this.setState({p:'Hold !'})\n            setTimeout(()=>{\n                this.setState({p:'Breathe out !',Containerclass:'loaderContainer shrink',loading:'off'})\n                setTimeout(()=>{\n                    this.setState({p:'Breathe in!',Containerclass:'loaderContainer grow',loading:'on'})\n                },breatheTime)\n            },holdTime)\n        },breatheTime)\n    }\n\n    componentDidMount(){\n        this.timer()\n        this.interval = setInterval(this.timer,this.state.totalTime)\n    }\n    componentWillUnmount(){\n        clearInterval(this.interval)\n    }\n    render(){\n\n        return(\n            <div className=\"Whole-container\">\n                <h2>Relax</h2>\n                <h6 className={this.state.loading}>it's loading .. </h6>\n                <div className={this.state.Containerclass}>\n                    <div className='grad-circle'></div>\n                    <div className='circle'></div>\n                    <div className='pointer-container'>\n                        <div className='pointer'></div>\n                    </div>\n                    <p className='text'>{this.state.p}</p>\n                </div>\n            </div>\n        )\n    }\n} ","import React ,{Component, Fragment}from 'react'\nimport './App.css'\nimport Loader from './Components/Loader'\nclass App extends Component {\n  render(){\n    return(\n      <Fragment>\n        <Loader/>\n      </Fragment>\n    )}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}